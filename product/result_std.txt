
vector test
 constructor
  default
   empty(): 1
   size(): 0
   max_size(): 256204778801521550

  ft_map2(ft_map.begin(), ft_map.end()
   ft_map[0]: A
   ft_map[1]: B
   ft_map[2]: C
   ft_map[3]: D
   ft_map[4]: E
   ft_map[5]: F
   ft_map[6]: G
   ft_map[7]: H
   ft_map[8]: I
   ft_map[9]: J

   ft_map2[0]: A
   ft_map2[1]: B
   ft_map2[2]: C
   ft_map2[3]: D
   ft_map2[4]: E
   ft_map2[5]: F
   ft_map2[6]: G
   ft_map2[7]: H
   ft_map2[8]: I
   ft_map2[9]: J

 operator=
   ft_map[0]: A
   ft_map[1]: B
   ft_map[2]: C
   ft_map[3]: D
   ft_map[4]: E
   ft_map[5]: F
   ft_map[6]: G
   ft_map[7]: H
   ft_map[8]: I
   ft_map[9]: J

  ft_map2 = ft_map
   ft_map2[0]: A
   ft_map2[1]: B
   ft_map2[2]: C
   ft_map2[3]: D
   ft_map2[4]: E
   ft_map2[5]: F
   ft_map2[6]: G
   ft_map2[7]: H
   ft_map2[8]: I
   ft_map2[9]: J

 get_allocator
  no outout

 Iterators
   ft_map[0]: A
   ft_map[1]: B
   ft_map[2]: C
   ft_map[3]: D
   ft_map[4]: E
   ft_map[5]: F
   ft_map[6]: G
   ft_map[7]: H
   ft_map[8]: I
   ft_map[9]: J
  ft_map.begin()  : 0
  ft_map.end() - 1: 9
  ft_map.rbegin() : 9
  ft_map.rend() -1: 0
  ft_map.begin() const   : 0
  ft_map.end() - 1 const : 9
  ft_map.rbegin() const  : 9
  ft_map.rend() - 1 const: 0

 clear
  ft_map.size(): 10
  ft_map.clear()
  ft_map.size(): 0

 insert
  ft_map.insert(ft::make_pair(2, "B")
   ft_map[2]: B

  ft_map.insert(ft_map.begin() ,ft::make_pair(1, "A")
   ft_map[1]: A
   ft_map[2]: B

  ft_map.insert(data ,data + 3)
   ft_map[1]: A
   ft_map[2]: B
   ft_map[3]: C
   ft_map[4]: D

 erase / find / count
  ft_map.size()  : 5
  ft_map.count(1): 1
  ft_map.find(1) : 1
  ft_map.erase(ft_map.begin())
  ft_map.size()  : 4
  ft_map.count(1): 0
  ft_map.find(1) : 4
  ft_map.erase(3)
  ft_map.size()  : 3
  ft_map.count(3): 0
  ft_map.erase(ft_map.begin(), ft_map.end())
  ft_map.size()  : 0

 swap
   ft_map[0]: A
   ft_map[1]: B
   ft_map[2]: C
   ft_map[3]: D
   ft_map[4]: E
   ft_map2[5]: F
   ft_map2[6]: G
   ft_map2[7]: H
   ft_map2[8]: I
   ft_map2[9]: J
  ft_map.swap(ft_map2)
  ft_map.begin()->first : 5
  ft_map2.begin()->first: 0

 equal_range
   ft_map[0]: A
   ft_map[2]: B
   ft_map[4]: C
   ft_map[6]: D
   ft_map[8]: E
   ft_map2[10]: F
   ft_map2[12]: G
   ft_map2[14]: H
   ft_map2[16]: I
   ft_map2[18]: J
  ft_map.equal_range(2).first->first: 2
  ft_map.lower_bound(3).first->first: 4
  ft_map.lower_bound(4).first->first: 4
  ft_map.upper_bound(4).first->first: 6

 key_comp
  ft_map.key_comp()(1, 2) is if(1 < 2): 1

 value_comp
  comp(p1, p2) is if(1 < 2): 1
  comp(p3, p2) is if(3 < 2): 0

 Non-member functions
   ft_map[0]: A
   ft_map[1]: B
   ft_map[2]: C
   ft_map[3]: D
   ft_map[4]: E
   ft_map2[0]: A
   ft_map2[1]: B
   ft_map2[2]: C
   ft_map2[3]: D
   ft_map2[4]: E

  ft_map == ft_map2: 1
  ft_map != ft_map2: 0
  ft_map <  ft_map2: 0
  ft_map <= ft_map2: 1
  ft_map >  ft_map2: 0
  ft_map >= ft_map2: 1

  ft_map2[1] = "A"

  ft_map == ft_map2: 0
  ft_map != ft_map2: 1
  ft_map <  ft_map2: 0
  ft_map <= ft_map2: 0
  ft_map >  ft_map2: 1
  ft_map >= ft_map2: 1

  swap(ft_map, ft_map2)
   ft_map[0]: A
   ft_map[1]: A
   ft_map[2]: C
   ft_map[3]: D
   ft_map[4]: E
   ft_map2[0]: A
   ft_map2[1]: B
   ft_map2[2]: C
   ft_map2[3]: D
   ft_map2[4]: E

 There are never two of the same Key in one map.
   ft_map[0]: A
   ft_map[1]: B
   ft_map[2]: C
   ft_map[3]: D
   ft_map[4]: E
  ft_map.insert(ft::make_pair(0, "A"): 0

 Check that insert or delete do not invalidate iterators.
   ft_map[0]: A
   ft_map[2]: B
   ft_map[4]: C
   ft_map[6]: D
   ft_map[8]: E
  itr = ft_map.begin()
  ft_map[1] = "ONE"
  (++itr)->first: 1
  itr = ft_map.begin()
  ft_map.erase(1)
  (++itr)->first: 2

